import logging
import asyncio
import os
import re
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
    CallbackQuery, Message
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

print(re.__doc__)
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env



# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN")

CONSULT_BOT_USERNAME = os.getenv("@KeyturSupport_bot")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
GROUP_ID = int(os.getenv("GROUP_ID", 0))

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîπ –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=MAIN_BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class BookingState(StatesGroup):
    waiting_for_name = State()
    waiting_for_day = State()
    waiting_for_time = State()
    waiting_for_phone = State()

# üîπ –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
DAYS = {
    "day_monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "day_tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "day_wednesday": "–°—Ä–µ–¥–∞",
    "day_thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "day_friday": "–ü—è—Ç–Ω–∏—Ü–∞",
}

TIMES = {
    "time_10_12": "10:00 - 12:00",
    "time_12_14": "12:00 - 14:00",
    "time_14_16": "14:00 - 16:00",
    "time_16_18": "16:00 - 18:00",
    "time_18_20": "18:00 - 20:00",
}

# üîπ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def main_keyboard(user_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="request_access")],
        
    ])

def days_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=day, callback_data=key)] for key, day in DAYS.items()
    ])

def time_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=time, callback_data=key)] for key, time in TIMES.items()
    ])

def phone_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        reply_markup=main_keyboard(message.from_user.id)
    )

# üìå –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@router.callback_query(F.data == "request_access")
async def request_access(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é*:")  
    await callback.answer()
    await state.set_state(BookingState.waiting_for_name)

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@router.message(BookingState.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ, {message.text}!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–µ–Ω—å:", reply_markup=days_keyboard())
    await state.set_state(BookingState.waiting_for_day)

# üìå –í—ã–±–æ—Ä –¥–Ω—è
@router.callback_query(BookingState.waiting_for_day, F.data.startswith("day_"))
async def set_day(callback: CallbackQuery, state: FSMContext):
    day = DAYS.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")
    await state.update_data(day=day)
    await callback.message.answer(f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *{day}*\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard(), parse_mode="Markdown")
    await callback.answer()
    await state.set_state(BookingState.waiting_for_time)

# üìå –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(BookingState.waiting_for_time, F.data.startswith("time_"))
async def set_time(callback: CallbackQuery, state: FSMContext):
    time_slot = TIMES.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
    await state.update_data(time=time_slot)
    await callback.message.answer("üìû –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ):", reply_markup=phone_keyboard())
    await callback.answer()
    await state.set_state(BookingState.waiting_for_phone)

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(BookingState.waiting_for_phone, F.contact)
async def get_phone(message: Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone=phone_number)

    user_data = await state.get_data()
    user_name = user_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    day = user_data.get("day", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")
    time_slot = user_data.get("time", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")

    # üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    confirmation_message = (
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. \n"
        f"üìÖ –î–µ–Ω—å: *{day}*\n"
        f"üïê –í—Ä–µ–º—è: *{time_slot}*\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{phone_number}`\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ!"
    )
    await message.answer(confirmation_message, parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())

    # üìå –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
    group_message = (
        f"üë§ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!*\n\n"
        f"üë§ –ò–º—è: {user_name}\n"
        f"üìÖ –î–µ–Ω—å: {day}\n"
        f"üïê –í—Ä–µ–º—è: {time_slot}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{phone_number}`"
    )
    await bot.send_message(GROUP_ID, group_message, parse_mode="Markdown")

    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã
@router.message(Command("get_group_id"))
async def get_group_id(message: Message):
    await message.answer(f"üìå ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{message.chat.id}`", parse_mode="Markdown")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())


