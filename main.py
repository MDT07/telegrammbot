import logging
import asyncio
import sys
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.filters import Command

if sys.platform == "win32":
    loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üîπ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∞
TOKEN = "8096023725:AAFi03no1KEDZK8UAGaE64CMl0ehZH7-PmM"  # <-- –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_ID = 1142640059  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
GROUP_ID = 1142640059  # ID –≥—Ä—É–ø–ø—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π!)


# üîπ –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://www.keyturkiye.com/")],
        [InlineKeyboardButton(text="üî• –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", url="https://t.me/KeyturSupport_bot")],
        [InlineKeyboardButton(text="üî• –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É", callback_data="request_access")]
    ])
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:", reply_markup=keyboard)

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
@router.callback_query(lambda c: c.data == "request_access")
async def process_request(callback_query: CallbackQuery):
    user = callback_query.from_user
    await bot.send_message(
        ADMIN_ID,
        f"‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username}) —Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.\n"
        f"–†–∞–∑—Ä–µ—à–∏—Ç—å? /approve_{user.id}"
    )
    await callback_query.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# ‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞—è–≤–∫—É
@router.message(lambda message: message.text.startswith("/approve_"))
async def approve_user(message: Message):
    try:
        user_id = int(message.text.split("_")[1])
        invite_link = "https://t.me/+4IcY80QaPMozNjVi"  # –£–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞: [–í—Å—Ç—É–ø–∏—Ç—å]({invite_link})", parse_mode="Markdown")
        await bot.send_message(GROUP_ID, f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{user_id}](tg://user?id={user_id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        dp.include_router(router)
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())
